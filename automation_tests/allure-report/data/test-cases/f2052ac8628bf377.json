{"uid":"f2052ac8628bf377","name":"test_increase_product_quantity","fullName":"tests.test_cart.TestCartPage#test_increase_product_quantity","historyId":"f130ee60856f89c71f4255c870d9e75c","time":{"start":1731599215516,"stop":1731599242804,"duration":27288},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"link account-basket\" href=\"/sepet\">...</a> is not clickable at point (1239, 32). Other element would receive the click: <span>...</span>\n  (Session info: chrome=130.0.6723.117)\nStacktrace:\n\tGetHandleVerifier [0x011BEBD3+24307]\n\t(No symbol) [0x01148D74]\n\t(No symbol) [0x0102C323]\n\t(No symbol) [0x01073B07]\n\t(No symbol) [0x01071F79]\n\t(No symbol) [0x0106FE64]\n\t(No symbol) [0x0106F45E]\n\t(No symbol) [0x0106415D]\n\t(No symbol) [0x0108FE8C]\n\t(No symbol) [0x01063C14]\n\t(No symbol) [0x01090124]\n\t(No symbol) [0x010A9579]\n\t(No symbol) [0x0108FC26]\n\t(No symbol) [0x0106219C]\n\t(No symbol) [0x0106311D]\n\tGetHandleVerifier [0x01468D93+2818227]\n\tGetHandleVerifier [0x014C542E+3196750]\n\tGetHandleVerifier [0x014BD9D2+3165426]\n\tGetHandleVerifier [0x0125DA70+675216]\n\t(No symbol) [0x01151B3D]\n\t(No symbol) [0x0114EA18]\n\t(No symbol) [0x0114EBB5]\n\t(No symbol) [0x01141640]\n\tBaseThreadInitThunk [0x750EFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x7703809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x7703806E+238]","statusTrace":"self = <test_cart.TestCartPage object at 0x000001BE7F6B6DF0>\n\n>   ???\n\nc:\\Users\\Lenovo\\Desktop\\pom-trendyol\\tests\\test_cart.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\cart_page.py:96: in go_to_cart\n    basket_link.click()\n..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001BE7FF7B670>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7703809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7703806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"link account-basket\" href=\"/sepet\">...</a> is not clickable at point (1239, 32). Other element would receive the click: <span>...</span>\nE         (Session info: chrome=130.0.6723.117)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x011BEBD3+24307]\nE       \t(No symbol) [0x01148D74]\nE       \t(No symbol) [0x0102C323]\nE       \t(No symbol) [0x01073B07]\nE       \t(No symbol) [0x01071F79]\nE       \t(No symbol) [0x0106FE64]\nE       \t(No symbol) [0x0106F45E]\nE       \t(No symbol) [0x0106415D]\nE       \t(No symbol) [0x0108FE8C]\nE       \t(No symbol) [0x01063C14]\nE       \t(No symbol) [0x01090124]\nE       \t(No symbol) [0x010A9579]\nE       \t(No symbol) [0x0108FC26]\nE       \t(No symbol) [0x0106219C]\nE       \t(No symbol) [0x0106311D]\nE       \tGetHandleVerifier [0x01468D93+2818227]\nE       \tGetHandleVerifier [0x014C542E+3196750]\nE       \tGetHandleVerifier [0x014BD9D2+3165426]\nE       \tGetHandleVerifier [0x0125DA70+675216]\nE       \t(No symbol) [0x01151B3D]\nE       \t(No symbol) [0x0114EA18]\nE       \t(No symbol) [0x0114EBB5]\nE       \t(No symbol) [0x01141640]\nE       \tBaseThreadInitThunk [0x750EFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x7703809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7703806E+238]\n\n..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestCartPage","time":{"start":1731599209168,"stop":1731599215513,"duration":6345},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"link account-basket\" href=\"/sepet\">...</a> is not clickable at point (1239, 32). Other element would receive the click: <span>...</span>\n  (Session info: chrome=130.0.6723.117)\nStacktrace:\n\tGetHandleVerifier [0x011BEBD3+24307]\n\t(No symbol) [0x01148D74]\n\t(No symbol) [0x0102C323]\n\t(No symbol) [0x01073B07]\n\t(No symbol) [0x01071F79]\n\t(No symbol) [0x0106FE64]\n\t(No symbol) [0x0106F45E]\n\t(No symbol) [0x0106415D]\n\t(No symbol) [0x0108FE8C]\n\t(No symbol) [0x01063C14]\n\t(No symbol) [0x01090124]\n\t(No symbol) [0x010A9579]\n\t(No symbol) [0x0108FC26]\n\t(No symbol) [0x0106219C]\n\t(No symbol) [0x0106311D]\n\tGetHandleVerifier [0x01468D93+2818227]\n\tGetHandleVerifier [0x014C542E+3196750]\n\tGetHandleVerifier [0x014BD9D2+3165426]\n\tGetHandleVerifier [0x0125DA70+675216]\n\t(No symbol) [0x01151B3D]\n\t(No symbol) [0x0114EA18]\n\t(No symbol) [0x0114EBB5]\n\t(No symbol) [0x01141640]\n\tBaseThreadInitThunk [0x750EFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x7703809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x7703806E+238]","statusTrace":"self = <test_cart.TestCartPage object at 0x000001BE7F6B6DF0>\n\n>   ???\n\nc:\\Users\\Lenovo\\Desktop\\pom-trendyol\\tests\\test_cart.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\cart_page.py:96: in go_to_cart\n    basket_link.click()\n..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001BE7FF7B670>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7703809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7703806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"link account-basket\" href=\"/sepet\">...</a> is not clickable at point (1239, 32). Other element would receive the click: <span>...</span>\nE         (Session info: chrome=130.0.6723.117)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x011BEBD3+24307]\nE       \t(No symbol) [0x01148D74]\nE       \t(No symbol) [0x0102C323]\nE       \t(No symbol) [0x01073B07]\nE       \t(No symbol) [0x01071F79]\nE       \t(No symbol) [0x0106FE64]\nE       \t(No symbol) [0x0106F45E]\nE       \t(No symbol) [0x0106415D]\nE       \t(No symbol) [0x0108FE8C]\nE       \t(No symbol) [0x01063C14]\nE       \t(No symbol) [0x01090124]\nE       \t(No symbol) [0x010A9579]\nE       \t(No symbol) [0x0108FC26]\nE       \t(No symbol) [0x0106219C]\nE       \t(No symbol) [0x0106311D]\nE       \tGetHandleVerifier [0x01468D93+2818227]\nE       \tGetHandleVerifier [0x014C542E+3196750]\nE       \tGetHandleVerifier [0x014BD9D2+3165426]\nE       \tGetHandleVerifier [0x0125DA70+675216]\nE       \t(No symbol) [0x01151B3D]\nE       \t(No symbol) [0x0114EA18]\nE       \t(No symbol) [0x0114EBB5]\nE       \t(No symbol) [0x01141640]\nE       \tBaseThreadInitThunk [0x750EFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x7703809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7703806E+238]\n\n..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"450149722409f669","name":"stdout","source":"450149722409f669.txt","type":"text/plain","size":64}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"attachmentStep":false,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestCartPage::0","time":{"start":1731599243148,"stop":1731599245399,"duration":2251},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"attachmentStep":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_cart"},{"name":"subSuite","value":"TestCartPage"},{"name":"host","value":"DESKTOP-0LR9ACM"},{"name":"thread","value":"7020-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f2052ac8628bf377.json","parameterValues":[]}